package codegen

import (
	"fmt"
	"github.com/dave/jennifer/jen"
	"github.com/softwaresale/lambdagen/internal/model"
	"go/types"
	"io"
)

const (
	VariableHandler = "handler"
	VariableRequest = "request"
	VariableContext = "ctx"
	HandlerFunc     = "HandleRequest"
)

func TranslateHandler(output io.Writer, definition model.ServiceDefinition, method model.HandlerDefinition) error {

	unit := jen.NewFile("main")

	// write the pre-amble
	unit.HeaderComment("Code generated by lambdagen. DO NOT EDIT")

	// generate the shared state
	generator := ServiceGenerator{
		def:    &definition,
		method: &method,
	}

	generator.formatSharedState(unit.Group)
	generator.formatInitFunc(unit.Group)
	generator.formatHandler(unit.Group)
	generator.formatMainFunc(unit.Group)

	return unit.Render(output)
}

type ServiceGenerator struct {
	def    *model.ServiceDefinition
	method *model.HandlerDefinition
}

func (gen *ServiceGenerator) formatSharedState(group *jen.Group) {

	namedTp, ok := gen.def.Type.(*types.Named)
	if !ok {
		panic("handler type must be a named type")
	}

	pkg := namedTp.Obj().Pkg().Path()
	name := namedTp.Obj().Name()

	group.Var().Id(VariableHandler).Op("*").Qual(pkg, name)
}

func (gen *ServiceGenerator) formatInitFunc(group *jen.Group) {
	group.Func().Id("init").Params().BlockFunc(func(group *jen.Group) {
		// load the config
		cfgVar := "cfg"
		group.List(jen.Id(cfgVar), jen.Err()).Op(":=").Qual("github.com/aws/aws-sdk-go-v2/config", "LoadDefaultConfig").Call(jen.Qual("context", "TODO").Call())
		CheckError(group, func(group *jen.Group) {
			group.Panic(jen.Err())
		})

		group.List(jen.Id(VariableHandler), jen.Err()).Op("=").Qual(gen.def.Init.Pkg().Path(), gen.def.Init.Name()).Call(jen.Id(cfgVar))
		CheckError(group, func(group *jen.Group) {
			group.Panic(jen.Err())
		})
	})
}

func (gen *ServiceGenerator) formatHandler(group *jen.Group) {
	group.Func().Id(HandlerFunc).Params(
		jen.Id(VariableContext).Qual("context", "Context"),
		jen.Id(VariableRequest).Qual("github.com/aws/aws-lambda-go/events", "APIGatewayProxyRequest"),
	).Parens(
		jen.List(
			jen.Qual("github.com/aws/aws-lambda-go/events", "APIGatewayProxyResponse"),
			jen.Error(),
		),
	).BlockFunc(func(group *jen.Group) {

		group.Var().Err().Error()

		// TODO generate the code to make our config variable
		configVar := "config"
		gen.formatRequestConfig(group, configVar)

		// call the function
		responseVar := "response"
		group.List(jen.Id(responseVar), jen.Err()).Op(":=").Id(VariableHandler).Dot(gen.method.HandlerMethodName).Call(
			jen.Id(VariableContext),
			jen.Id(configVar),
		)
		CheckError(group, func(ifGroup *jen.Group) {
			GenerateAPIError(ifGroup, 500, "error while processing handler")
		})

		// Serialize the body
		encodedResponseVar := "responseBody"
		group.List(jen.Id(encodedResponseVar), jen.Err()).Op(":=").Qual("encoding/json", "Marshal").Call(jen.Id(responseVar))
		CheckError(group, func(ifGroup *jen.Group) {
			GenerateAPIError(ifGroup, 500, "failed to serialize body")
		})

		group.Return(
			jen.List(
				jen.Qual("github.com/aws/aws-lambda-go/events", "APIGatewayProxyResponse").Values(jen.Dict{
					jen.Id("StatusCode"): jen.Lit(200),
					jen.Id("Body"):       jen.String().Parens(jen.Id(encodedResponseVar)),
				}),
				jen.Nil(),
			),
		)
	})
}

func (gen *ServiceGenerator) formatRequestConfig(group *jen.Group, configVar string) {
	fieldAssignments := make(map[string]string)
	for _, pathVar := range gen.method.Config.Path {
		gen.formatPathVariable(group, pathVar)
		fieldAssignments[pathVar.FieldName] = pathVar.Name
	}

	for _, queryVar := range gen.method.Config.Query {
		gen.formatQueryVariable(group, queryVar)
		fieldAssignments[queryVar.FieldName] = queryVar.Name
	}

	bodyVar := ""
	if len(gen.method.Config.Body.Name) > 0 {
		bodyVar = "body"
		gen.formatBody(group, bodyVar)
		fieldAssignments[gen.method.Config.Body.FieldName] = bodyVar
	}

	// make the request config
	configTypeInfo := gen.method.Config.Type.Obj()
	group.Id(configVar).Op(":=").Qual(configTypeInfo.Pkg().Path(), configTypeInfo.Name()).Values(jen.DictFunc(func(dict jen.Dict) {
		for field, varName := range fieldAssignments {
			dict[jen.Id(field)] = jen.Id(varName)
		}
	}))
}

func (gen *ServiceGenerator) formatPathVariable(group *jen.Group, pathVar model.VariableDefinition) {
	// load the
	rawVariable := fmt.Sprintf("%sRaw", pathVar.Name)
	group.List(jen.Id(rawVariable), jen.Id("ok")).Op(":=").Id(VariableRequest).Dot("PathParameters").Index(jen.Id(pathVar.Name))
	group.If(jen.Op("!").Id("ok")).BlockFunc(func(group *jen.Group) {
		GenerateAPIError(group, 400, fmt.Sprintf("path variable '%s' not found", pathVar.Name))
	})

	// generate conversion code
	ConversionCode(group, pathVar.Type, rawVariable, pathVar.Name)
}

func (gen *ServiceGenerator) formatQueryVariable(group *jen.Group, pathVar model.VariableDefinition) {
	// load the
	rawVariable := fmt.Sprintf("%sRaw", pathVar.Name)
	group.List(jen.Id(rawVariable), jen.Id("ok")).Op(":=").Id(VariableRequest).Dot("QueryParams").Index(jen.Id(pathVar.Name))
	group.If(jen.Op("!").Id("ok")).BlockFunc(func(group *jen.Group) {
		GenerateAPIError(group, 400, fmt.Sprintf("query variable '%s' not found", pathVar.Name))
	})

	// generate conversion code
	ConversionCode(group, pathVar.Type, rawVariable, pathVar.Name)
}

func (gen *ServiceGenerator) formatBody(group *jen.Group, bodyVar string) {

	var typeFunc func(stmt *jen.Statement)
	switch bodyType := gen.method.Config.Body.Type.(type) {
	case *types.Basic:
		typeFunc = func(stmt *jen.Statement) {
			stmt.Id(bodyType.Name())
		}

	case *types.Named:
		typeFunc = func(stmt *jen.Statement) {
			stmt.Qual(bodyType.Obj().Pkg().Path(), bodyType.Obj().Name())
		}

	default:
		panic("invalid body type")
	}

	unmarshalVar := "bodyBytes"
	group.Id(unmarshalVar).Op(":=").Index().Byte().Parens(jen.Id(VariableRequest).Dot("Body"))
	group.Var().Id(bodyVar).Do(typeFunc)
	group.Err().Op("=").Qual("encoding/json", "Unmarshal").Call(jen.Id(unmarshalVar), jen.Op("&").Id(bodyVar))
	GenerateAPIError(group, 500, fmt.Sprintf("failed to unmarshal body"))
}

func (gen *ServiceGenerator) formatMainFunc(group *jen.Group) {
	group.Func().Id("main").Params().Block(
		jen.Qual("github.com/aws/aws-lambda-go/lambda", "Start").Call(jen.Id(HandlerFunc)),
	)
}
